// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InBrainSurveys_SDK_Swift
import Foundation
@_exported import InBrainSurveys_SDK_Swift
import Swift
import SystemConfiguration
import UIKit
import WebKit
@objc public protocol InBrainDelegate : AnyObject {
  @objc optional func didReceiveInBrainRewards(rewardsArray: [InBrainSurveys_SDK_Swift.InBrainReward])
  @objc optional func didFailToReceiveRewards(error: Swift.Error)
  @objc optional func surveysClosed(byWebView: Swift.Bool, completedSurvey: Swift.Bool)
  @available(*, unavailable, renamed: "surveysClosed(byWebView:completedSurvey:)")
  @objc optional func surveysClosedFromPage()
  @available(*, unavailable, renamed: "surveysClosed(byWebView:completedSurvey:)")
  @objc optional func surveysClosed()
}
@objc public protocol NativeSurveyDelegate : AnyObject {
  @objc @available(*, unavailable, renamed: "nativeSurveysLoadingStarted(placementId:)")
  func nativeSurveysLoadingStarted()
  @objc func nativeSurveysLoadingStarted(placementId: Swift.String?)
  @objc @available(*, unavailable, renamed: "nativeSurveysReceived(surveys:placementId:)")
  func nativeSurveysReceived(_ surveys: [InBrainSurveys_SDK_Swift.InBrainNativeSurvey])
  @objc func nativeSurveysReceived(_ surveys: [InBrainSurveys_SDK_Swift.InBrainNativeSurvey], placementId: Swift.String?)
  @objc @available(*, unavailable, renamed: "failedToReceiveNativeSurveys(error:placementId:)")
  func failedToReceiveNativeSurveys(error: Swift.Error)
  @objc func failedToReceiveNativeSurveys(error: Swift.Error, placementId: Swift.String?)
}
@objc final public class InBrain : ObjectiveC.NSObject {
  @objc public static let shared: InBrainSurveys_SDK_Swift.InBrain
  @objc weak final public var inBrainDelegate: InBrainSurveys_SDK_Swift.InBrainDelegate?
  @objc weak final public var nativeSurveysDelegate: InBrainSurveys_SDK_Swift.NativeSurveyDelegate?
  @objc final public var isOnScreen: Swift.Bool {
    @objc get
  }
  @objc final public func setInBrain(apiClientID: Swift.String, apiSecret: Swift.String, isS2S: Swift.Bool)
  @objc final public func setInBrain(apiClientID: Swift.String, apiSecret: Swift.String, isS2S: Swift.Bool, userID: Swift.String?)
  @objc final public func set(userID: Swift.String?)
  @objc final public func setNavigationBarTitle(_ title: Swift.String)
  @objc final public func setNavigationBarConfig(_ config: InBrainSurveys_SDK_Swift.InBrainNavBarConfig)
  @objc final public func setStatusBarConfig(_ config: InBrainSurveys_SDK_Swift.InBrainStatusBarConfig)
  @objc final public func setInBrainValuesFor(sessionID: Swift.String?, dataOptions: [[Swift.String : Any]]?)
  @objc final public func setLanguage(_ language: Swift.String) throws
  @objc final public func checkForAvailableSurveys(completion: @escaping ((Swift.Bool, Swift.Error?) -> (Swift.Void)))
  @objc final public func showSurveys(from viewController: UIKit.UIViewController? = nil)
  @objc final public func showNativeSurvey(_ survey: InBrainSurveys_SDK_Swift.InBrainNativeSurvey, from viewController: UIKit.UIViewController? = nil)
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String, placementId: Swift.String? = nil, from viewController: UIKit.UIViewController? = nil)
  @objc final public func getRewards(success: @escaping ([InBrainSurveys_SDK_Swift.InBrainReward]) -> (), failed: @escaping (Swift.Error) -> ())
  @objc final public func getRewards()
  @objc final public func confirmRewards(txIdArray: [Swift.Int])
  @objc final public func getNativeSurveys(placementId: Swift.String? = nil)
  @objc final public func getNativeSurveys(placementID: Swift.String? = nil, success: @escaping ([InBrainSurveys_SDK_Swift.InBrainNativeSurvey]) -> (), failed: @escaping (Swift.Error) -> ())
  @available(*, deprecated, message: "Please, use separate setLanguage(from:) function")
  @objc final public func setInBrain(apiClientID: Swift.String, apiSecret: Swift.String, isS2S: Swift.Bool, userID: Swift.String?, language: Swift.String)
  @available(*, deprecated, renamed: "setLanguage(_:)")
  @objc final public func setLanguage(value: Swift.String)
  @available(swift, obsoleted: 0.1)
  @available(*, deprecated, renamed: "showSurveys(from:)")
  @objc final public func showSurveys()
  @available(swift, obsoleted: 0.1)
  @available(*, deprecated, renamed: "showNativeSurveyWith(id:placementId:from:)")
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String)
  @available(swift, obsoleted: 0.1)
  @available(*, deprecated, renamed: "showNativeSurveyWith(id:placementId:from:)")
  @objc final public func showNativeSurveyWith(id surveyId: Swift.String, from viewController: UIKit.UIViewController)
  @available(swift, obsoleted: 0.1)
  @available(*, deprecated, renamed: "getNativeSurveys(placementId:)")
  @objc final public func getNativeSurveys()
  @available(swift, obsoleted: 0.1)
  @available(*, deprecated, renamed: "getNativeSurveys(placementId:success:failed:)")
  @objc final public func getNativeSurveys(success: @escaping ([InBrainSurveys_SDK_Swift.InBrainNativeSurvey]) -> (), failed: @escaping (Swift.Error) -> ())
  @objc deinit
}
@objc public class InBrainNavBarConfig : ObjectiveC.NSObject {
  @objc public init(backgroundColor: UIKit.UIColor? = nil, buttonsColor: UIKit.UIColor? = nil, titleColor: UIKit.UIColor? = nil, isTranslucent: Swift.Bool = false, hasShadow: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class InBrainNativeSurvey : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.String
  @objc final public let placementId: Swift.String?
  @objc final public let rank: Swift.Int
  @objc final public let time: Swift.Int
  @objc final public let value: Swift.Double
  @objc final public let currencySale: Swift.Bool
  @objc final public let multiplier: Swift.Double
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class InBrainStatusBarConfig : ObjectiveC.NSObject {
  @objc public init(statusBarStyle: UIKit.UIStatusBarStyle, hideStatusBar: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class InBrainReward : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let transactionId: Swift.Int
  @objc final public let amount: Swift.Float
  @objc final public let currency: Swift.String
  @objc final public let transactionType: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
